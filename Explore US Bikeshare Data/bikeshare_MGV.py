# -*- coding: utf-8 -*-
"""proj_3_Python_Udacity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15Yg5TXr8Y_GGD0CWC8I2zGKLohzvqdpy

References

https://realpython.com/python-keyerror/

https://stackoverflow.com/questions/53037698/how-can-i-find-the-most-frequent-two-column-combination-in-a-dataframe-in-python
"""

import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

dict_city =	{
        '1': 'chicago',
        '2': 'new york city',
        '3': 'washington' }

dict_month = {
        '1': 'january',
        '2': 'february',
        '3': 'march',
        '4': 'april',
        '5': 'may',
        '6': 'june' }

def get_filters():

    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """

    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). 
    # HINT: Use a while loop to handle invalid inputs
    
    while True:
      try:
        c=input("Choose one the followings cities \n 1.- Chicago\n 2.- New York\n 3.- Washington\n ")
        city = dict_city[c] 
        print("You have choosed {}".format(city))
        break
      except KeyError:
        print(f"This option {c} is not valid, Please enter again.")
      except ExplicitException:
        pass

    # TO DO: get user input for month (all, january, february, ... , june)

    while True:
        question=input("Would you like to filter per mount? Enter yes or no.\n ")
        if question == "yes":
          m=input("Choose one the followings month \n 1.- January\n 2.- February\n 3.- March\n 4.- April\n 5.- May\n 6.- June\n")
          month=dict_month[m]
          print("You have choosed {}".format(month))
          break
        elif question == "no":
          month="all"
          break
        else:
          print("Please type a correct option")

    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)

    while True:
        day=input("Choose one day. Please type your response as an integer (e.g. Monday=1) ")
        if day not in ['0','1','2','3','4','5','6','all']:
          print("Please type a correct option")
        else:
          print("You have choosed {}".format(day))
          break

 #   print(type(city), type(month), type(day))
    print('-'*40)
    return city, month, day

def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    
    df = pd.read_csv(CITY_DATA[city])

    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.dayofweek
    df['day_of_week'] = df['day_of_week'].astype(str)

    # filter by month if applicable
    if month != 'all':
    # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1

    # filter by month to create the new dataframe
        df = df[df['month'] == month]

    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day]

    return df

def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
   
    m = str(df['month'].mode()[0])
    popular_month=dict_month[m]
    print("The most common month is: {} \n".format(popular_month.capitalize()))

    # TO DO: display the most common day of week

    popular_day = df['day_of_week'].mode()[0]
    print("The most common day of week is: {} \n".format(popular_day))

    # TO DO: display the most common start hour
    # find the most popular hour
    df['hour'] = df['Start Time'].dt.hour
    popular_hour = df['hour'].mode()[0]
    print("The most common hour was: {} hr \n".format(popular_hour))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station

    user_start_station = df['Start Station'].value_counts().idxmax()
    print('The most commonly used start station was {} '.format(user_start_station))

    # TO DO: display most commonly used end station

    user_end_station = df['End Station'].value_counts().idxmax()
    print('The most commonly used end station was {} '.format(user_end_station))

    # TO DO: display most frequent combination of start station and end station trip [2]

    user_start_end_route = df.groupby(['Start Station','End Station']).size().idxmax()
    print('The most commonly start - end station was {} '.format(user_start_end_route))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time

    total_trip_time1 = df.groupby('month')['Trip Duration'].sum()
    print('The total travel time {} [s] \n'.format(total_trip_time1))

    # TO DO: display mean travel time

    mean_trip_time = df.groupby('month')['Trip Duration'].mean()
    print('The mean travel time {} \n'.format(mean_trip_time))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def user_stats(df):

    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()
    
    # TO DO: Display counts of user types
    try: 
    	count_user_type = df.groupby('User Type').size()
    	print('The total counts of user types was \n {} \n'.format(count_user_type))

    	# TO DO: Display counts of gender

    	count_gender = df.groupby('Gender').size()
    	print('The total count by gender was {} \n'.format(count_gender))

    	# TO DO: Display earliest, most recent, and most common year of birth

    	most_recent_birth = df['Birth Year'].min()
    	print('The most recent year of birth was {} \n'.format(most_recent_birth))

    	oldest_birth = df['Birth Year'].max()
    	print('The oldest year of birth was {} \n'.format(oldest_birth))

    	most_common_year = df['Birth Year'].value_counts().idxmax()
    	print('The total travel time {} \n'.format(most_common_year))

    	print("\nThis took %s seconds." % (time.time() - start_time))
    	print('-'*40)
    except KeyError:
    	pass

def display_df(df):
	question = input('\nWould you like to see the first 5 raw data? Enter yes or no.\n')
	if question.lower() in ["yes","y"]:
		print(df.head(5))


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)
        display_df(df)
#        df.head(5)
        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)


        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break

if __name__ == "__main__":
	main()